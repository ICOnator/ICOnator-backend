server.port=${PORT:8083}

spring.profiles.active=dev
spring.main.banner-mode=off

spring.jpa.hibernate.ddl-auto=${JPA_HIBERNATE_DDL_AUTO}
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=${DATASOURCE_URL}
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}
spring.jpa.generate-ddl=${JPA_GENERATE_DDL_ENABLED}

spring.application.name=iconator-rates
logging.level.io.iconator.rates=ERROR
logging.config=classpath:logback-spring.xml

io.iconator.services.rates.cors.urls=${ICONATOR_CORS_URLS}

io.iconator.commons.auth.actuator.user=${ICONATOR_AUTH_ACTUATOR_USER}
io.iconator.commons.auth.actuator.password=${ICONATOR_AUTH_ACTUATOR_PASSWORD}
management.endpoint.health.show-details=when-authorized
logstash.address=${LOGSTASH_ADDRESS}

io.iconator.commons.amqp.url=${AMQP_URL}

io.iconator.services.rates.fetch.historical.enabled=${RATES_FETCH_HISTORICAL_ENABLED}

io.iconator.services.rates.fetch.periodic.enabled=${RATES_FETCH_PERIODIC_ENABLED}
# time in milliseconds:
io.iconator.services.rates.fetch.periodic.interval=${RATES_FETCH_PERIODIC_INTERVAL}
io.iconator.services.rates.retry.attempts.max=${RATES_RETRY_ATTEMPTS_MAX}
# time in milliseconds:
io.iconator.services.rates.retry.wait-between-attemps.min=${RATES_RETRY_BETWEEN_ATTEMPTS_MIN}
io.iconator.services.rates.retry.wait-between-attemps.max=${RATES_RETRY_BETWEEN_ATTEMPTS_MAX}

# time in milliseconds:
io.iconator.services.rates.fetch.range-between-threshold.min=${RATES_FETCH_RANGE_BETWEEN_THRESHOLD_MIN}
io.iconator.services.rates.fetch.range-between-threshold.max=${RATES_FETCH_RANGE_BETWEEN_THRESHOLD_MAX}

io.iconator.services.rates.user-agent=${RATES_USER_AGENT}
io.iconator.services.rates.currencies.fiat.base=${RATES_CURRENCIES_FIAT_BASE}
io.iconator.services.rates.currencies.crypto.enabled=${RATES_CURRENCIES_CRYPTO_ENABLED}
io.iconator.services.rates.exchanges.enabled=${RATES_EXCHANGES_ENABLED}

io.iconator.services.rates.outliers.std-dev.threshold.lower-bound=${RATES_OUTLIERS_STDDEV_LOWER_BOUND}
io.iconator.services.rates.outliers.std-dev.threshold.upper-bound=${RATES_OUTLIERS_STDDEV_UPPER_BOUND}